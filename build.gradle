plugins {
    id 'org.springframework.boot' version '2.4.4'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'java'
}

group = 'ru.w'
version = '0.0.2-SNAPSHOT'
description = 'Automation of the business process of configuration update requests handling'
sourceCompatibility = '11'

repositories {
    mavenCentral()
    maven { url 'https://packages.atlassian.com/maven-external/' }
}

dependencies {
    implementation platform('org.springframework.boot:spring-boot-dependencies:2.3.1.RELEASE')
    implementation platform('org.camunda.bpm:camunda-bom:7.14.0')

    implementation 'com.atlassian.jira:jira-rest-java-client-core:5.2.2'
    implementation 'io.atlassian.fugue:fugue:4.7.2'

    implementation 'org.springframework.boot:spring-boot-starter-jdbc'
    implementation 'org.springframework.boot:spring-boot-starter-web'

    implementation 'org.camunda.bpm.springboot:camunda-bpm-spring-boot-starter-rest:7.14.0'
    implementation 'org.camunda.bpm.springboot:camunda-bpm-spring-boot-starter-webapp:7.14.0'

    //runtimeOnly 'com.h2database:h2'
    runtimeOnly 'org.postgresql:postgresql'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'

    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
}

bootRun {
    if (project.hasProperty('args')) {
        args project.args.split(',')
    }
}

test {
    if (project.hasProperty('args')) {
        project.args.split(',').each {
            def (key, value) = it.replaceFirst('--', "").split('=')
            systemProperty((String) key, (String) value)
        }
    }
    useJUnitPlatform()
}
